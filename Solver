from copy import deepcopy

import numpy as np
import random, time

def generate_board():
    testBoard = np.array([[1,2,3],[4,5,6],[7,8,None]])
    for i in range(random.randint(0,50)):
        # Find the blank space
        possibleMoves = []
        emptySpaceLocation = None, None
        for i in range(0, len(testBoard)):
            for j in range(0, len(testBoard)):
                if testBoard[i][j] is None:
                    emptySpaceLocation = i, j
                    if i < 2:
                        possibleMoves.append([i+1, j])
                    if j < 2:
                        possibleMoves.append([i, j+1])
                    if i > 0:
                        possibleMoves.append([i-1, j])
                    if j > 0:
                        possibleMoves.append([i, j-1])
        possibleMoves = np.array(possibleMoves)
        move = possibleMoves[random.randint(0,len(possibleMoves)-1)]
        temp = testBoard[move[0], move[1]]
        testBoard[move[0], move[1]] = None
        testBoard[emptySpaceLocation[0], emptySpaceLocation[1]] = temp
    return testBoard
print(generate_board())


class Node:
    def __init__(self, board, level, evaluation):
        """ Initialize the node with the data, level of the node and the calculated fvalue """
        self.board = board
        self.level = level
        self.evaluation = evaluation

    def generateChildren(self):
        # Generate nodes from moving in all 4 directions
        x, y = self.find(self.board)
        all4Moves = [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]]
        children = []
        for i in all4Moves:
            child = self.doMove(self.board, x, y, i[0], i[1])
            if child is not None:
                childNode = Node(child, self.level + 1, 0)
                children.append(childNode)
        return children


    def doMove(self, board, x1, y1, x2, y2):
        # Move pieces in given direction if possible
        if 0 <= x2 < len(self.board) and 0 <= y2 < len(self.board): #x2 >= 0 and x2 < len(self.board) and y2 >= 0 and y2 < len(self.board):
            tempBoard = deepcopy(board)
            temp = tempBoard[x2][y2]
            tempBoard[x2][y2] = tempBoard[x1][y1]
            tempBoard[x1][y1] = temp
            return tempBoard
        else:
            return None


    def find(self, puz):
        # Find the blank space
        for i in range(0, len(self.board)):
            for j in range(0, len(self.board)):
                if puz[i][j] is None:
                    return i, j


class Puzzle:
    def __init__(self, size):
        # Initialise puzzle and set unreached/searched lists to empty
        self.size = size
        self.open = []
        self.closed = []


    def evaluate(self, start, goal):
        # Returns heuristic calculation plus depth of search (a* search)
        return self.calculateHeuristic(start.board, goal) + start.level


    def calculateHeuristic(self, start, goal):
        # Returns just heuristic calculation (greedy search)
        flattenedList = [i for row in start for i in row]
        flattenedGoalList = [i for row in goal for i in row]
        flattenedList.remove(None)
        flattenedGoalList.remove(None)
        temp = 0
        for i in range(len(flattenedList)):
            if flattenedList[i] != flattenedGoalList[i]:
                temp += 1
                distanceFromCorrectPos = flattenedList[i] - (i + 1)
                temp += distanceFromCorrectPos
        return temp


    def aStar(self):
        board = generate_board()
        start = Node(board, 0, 0)
        goal = [[1,2,3],[4,5,6],[7,8,None]]
        start.evaluation = self.evaluate(start, goal)
        # Put start node in search list
        self.open.append(start)
        print("\n\n")
        moveCount = 0
        while True:
            currentNode = self.open[0]
            skip = False
            # if currentNode.board not in self.closed:
            for node in self.closed:
                if np.array_equal(currentNode, node):
                    skip = True
            if not skip:
                print("")
                print(moveCount, "Moves made")
                print("")
                moveCount += 1
                # Displaying the data
                for i in currentNode.board:
                    for j in i:
                        print(j, end=" ")
                    print("")

                # If the difference between current and goal node is 0 we have reached the goal node
                if self.calculateHeuristic(currentNode.board, goal) == 0:
                    break
                # Generate nodes from all possible moves from current node
                for move in currentNode.generateChildren():
                    move.evaluation = self.evaluate(move, goal)
                    self.open.append(move)
                self.closed.append(currentNode.board)
                del self.open[0]
            else:
                del self.open[0]

            # sort the open list based on evaluation value
            self.open.sort(key=lambda x: x.evaluation, reverse=False)


    def greedySearch(self):
        board = generate_board()
        start = Node(board, 0, 0)
        goal = [[1, 2, 3], [4, 5, 6], [7, 8, None]]
        start.evaluation = self.evaluate(start, goal)
        self.open.append(start)
        print("\n\n")
        moveCount = 0
        while True:
            currentNode = self.open[0]
            skip = False
            for node in self.closed:
                if np.array_equal(currentNode.board, node):
                    skip = True
            if not skip:
                print("")
                print(moveCount, "Moves made")
                print("")
                moveCount += 1
                for i in currentNode.board:
                    for j in i:
                        print(j, end=" ")
                    print("")

                # Here greedy just uses distance from end goal as heuristic rather than end goal +
                # distance travelled from start
                if self.calculateHeuristic(currentNode.board, goal) == 0:
                    break;
                availableMoves = currentNode.generateChildren()
                for move in currentNode.generateChildren():
                    move.evaluation = self.calculateHeuristic(move.board, goal)
                    self.open.append(move)
                self.closed.append(currentNode.board)
                del self.open[0]
            else:
                del self.open[0]
            self.open.sort(key=lambda x: x.evaluation, reverse=False)
               


puzzle = Puzzle(3)
# puzzle.aStar()
puzzle.greedySearch()
